#+TITLE: Coding 1 Logs

#+BEGIN_EXPORT html
<pre>
<code>> ./blog-1/01_software/02_coding/01_logs/coding_1_logs.html</code>
</pre>
#+END_EXPORT

[[https://hnvy.github.io/blog-1/][Home page]] - [[https://github.com/hnvy/blog-1/edit/main/src/01_software/02_coding/01_logs/coding_1_logs.org][ESotP]]

-----

* Introduction
:PROPERTIES:
:CUSTOM_ID: intro
:END:
See [[https://hnvy.github.io//about.html#coding][this]].

* E#004 (2022-10-24) - 03.2_variables (C)
:PROPERTIES:
:CUSTOM_ID: orgd9cd450
:END:

#+BEGIN_EXPORT html
<pre><span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">TITLE: 03.2_variables.c
</span>
<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">This is a little bit more about variables
</span>
<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="string">&lt;</span><span class="string">stdio.h</span><span class="string">&gt;</span> <span class="comment-delimiter">// </span><span class="comment">Same old, same old...
</span>
<span class="type">i</span><span class="type">n</span><span class="type">t</span> <span class="function-name">main</span>()
{
	<span class="comment-delimiter">/</span><span class="comment-delimiter">*</span><span class="comment">
	Sometimes, we might declare a variable, call it somewhere (e.g., in a ~printf~ statement), and get a weird error.

	This might be because we have not assigned a value to that variable.

	The issue outlined about can be easily overcome by initialising the variable with a value. Like so:

	The following program will calculate the area of a rectangle...
</span><span class="comment-delimiter">	*/</span>

	<span class="type">i</span><span class="type">n</span><span class="type">t</span> <span class="variable-name">width</span> = 5, <span class="variable-name">height</span> = 10, <span class="variable-name">area</span>; <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">The number 5, and the number 10, are called &quot;initialisers&quot; (because they have initialised the ~width~ and ~height~, respectively)
</span>
	area = width * height; <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">We now multiply the two values
</span>
	printf(<span class="string">&quot;The area of the square is\n%d * %d = %d&quot;</span>, height, width, area);

	<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">To avoid having to use so many variables, we can simply write the expression WITHIN the ~printf~. Like so:
</span>	printf(<span class="string">&quot;\n\n\n\nThe area of the square is\n%d&quot;</span>, height * width);

	<span class="keyword">return</span>(0);
}


<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">** TEST 4: Create a program which will calculate the area of the circle that has a radius of 10. For Pi, use the value &quot;3.14&quot;. Print out your answer.</span><span class="comment">
</span></pre>
#+END_EXPORT

* E#003 (2022-10-23) - 03.1_variables (C)
:PROPERTIES:
:CUSTOM_ID: org1e46d47
:END:

#+BEGIN_EXPORT html
<pre><span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">TITLE: 03.1_variables.c
</span>
<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">We can declare a variable. Let</span><span class="comment">'</span><span class="comment">s have look:
</span>
<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="string">&lt;</span><span class="string">stdio.h</span><span class="string">&gt;</span> <span class="comment-delimiter">// </span><span class="comment">Same old, same old...
</span>
<span class="type">i</span><span class="type">n</span><span class="type">t</span> <span class="function-name">main</span>()
{
	<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">It seems that, usually, we should declare the variables before we create any statements.
</span>	<span class="type">i</span><span class="type">n</span><span class="type">t</span> <span class="variable-name">digit1</span>, <span class="variable-name">digit2</span>, <span class="variable-name">total</span>; <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">~int~ is a special keyword which C reads. It stands for &quot;integer&quot;. You can replace the words which follow with whatever you like.
</span>	<span class="type">f</span><span class="type">loa</span><span class="type">t</span> <span class="variable-name">decimal</span>; <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">~float~ is another special word. It stands for floating-point. You can replace the word &quot;decimal&quot; with whatever you like.
</span>
	<span class="comment-delimiter">/</span><span class="comment-delimiter">*</span><span class="comment">
	// We can declare many things at once:
	int variable1, variable2, variable3, variable4, variable5; // All of these will be classed as integers.
</span><span class="comment-delimiter">	*/</span>

	<span class="comment-delimiter">// </span><span class="comment">Now, the stuff we declared above are all EMPTY! Let</span><span class="comment">'</span><span class="comment">s give (i.e., assign) them some values. You must ALWAYS declare before assign.
</span>
	digit1 = 30;
	digit2 = 326;
	decimal = 23.827f; <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">Since this has a decimal point, it seems that people recommend that we add the letter ~f~ at the end.
</span>
	total = digit1*digit2; <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">Multiply the two digits.
</span>
	printf(<span class="string">&quot;Multiplying %d and %d will give us %d&quot;</span>, digit1, digit2, total);
	<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">Ta-daaa! We used the placeholders (which we learned about in the 02_placeholders.c lesson) to create a beautiful ~printf~ statement!
</span>	
	<span class="comment-delimiter">// </span><span class="comment">If you want to print a float value to a certain number of decimal places, then you can do something like this
</span>	printf(<span class="string">&quot;\n\nThis is the decimal number to 2 d.p.: %.2f&quot;</span>, decimal);
	<span class="comment-delimiter">// </span><span class="comment">Note how we have this ~.2f~? Well, this is to tell C that we want the answer to be rounded to 2 decimal places.
</span>
	<span class="keyword">return</span>(0);
}

<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">** TEST 3: Test time! Based on the concepts above, write a program which prints out the solution for ~((12+90)/18.23)*50~. Store each number in an appropriate variable. Round the answer to 4 decimal places.
</span>
<span class="comment-delimiter">/</span><span class="comment-delimiter">* </span><span class="comment">
#include &lt;stdio.h&gt;

int main()
{
	int d1, d2, d3;
	float decimal, result;

	d1 = 12;
	d2 = 90;
	d3 = 50;

	decimal = 18.23f;

	result = ((d1+d2)/decimal)*d3;

	printf(&quot;The answer to ((%d+%d)/%f)*%d = </span><span class="comment">'</span><span class="comment">fg</span><span class="comment">'</span><span class="comment"> %.4f&quot;, d1, d2, decimal, d3, result);

	return(0);
}
</span><span class="comment-delimiter">*/</span>
</pre>
#+END_EXPORT

* E#002 (2022-10-02) - 02_placeholders (C)
:PROPERTIES:
:CUSTOM_ID: org3e97f15
:END:

#+BEGIN_EXPORT html
<pre><span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">TITLE: 02_placeholders.c
</span>
<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">We can use placeholders in order to &quot;place&quot; values in a string. Let</span><span class="comment">'</span><span class="comment">s have a look:
</span>
<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="string">&lt;</span><span class="string">stdio.h</span><span class="string">&gt;</span> <span class="comment-delimiter">// </span><span class="comment">We are going to use the ~printf~ function, so therefore we need to include the ~stdio.h~ header.
</span>
<span class="type">i</span><span class="type">n</span><span class="type">t</span> <span class="function-name">main</span>()
{
	printf(<span class="string">&quot;Hello, here we have a number in the string format (so, really, it</span><span class="string">'</span><span class="string">s not a number): 73498\n&quot;</span>); <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">The ~\n~ is simply telling the program to start a new line (this is called an escape sequence). There is a whole massive list of these escape sequences: ~\t~ (for a tab), ~\\~ (for a literal slash character)...
</span>
	printf(<span class="string">&quot;Woah, now we can use the placeholder print out an actual number: %d\n&quot;</span>, 847562); <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">As can be seen, there is now a ~%d~ inside the double quotes. This is the placeholder. The number 847562 corresponds to that ~%d~.
</span>
	printf(<span class="string">&quot;Let</span><span class="string">'</span><span class="string">s experiment with some of these placeholders, shall we?\n&quot;</span>);

	printf(<span class="string">&quot;We can add many placeholders into one string, like so: (first number) %d - (second number) %d = (third number) %d\n&quot;</span>, 10, 4, 6); <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">As can be seen, 10 corresponds to the first ~%d~, 4 corresponds to the second ~%d~, and finally, 6 corresponds to the third ~%d~. Cool, huh?
</span>
	printf(<span class="string">&quot;Interestingly, we can make C do the maths for us! Like so: %d - %d = %d&quot;</span>, 10, 4, 10-4); <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">The last argument (i.e., 10-4) makes C actually place the result of 10-4.
</span>
	printf(<span class="string">&quot;\n\n\n&quot;</span>); <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">Printing 3 new lines to leave some space.
</span>	
	printf(<span class="string">&quot;There is a\nnew line going\nto be inserted\nright here!\n\n&quot;</span>);

	printf(<span class="string">&quot;We can place some %s&quot;</span>, <span class="string">&quot;dinosaurs&quot;</span>); <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">You guessed it! ~%s~ is just like ~%d~, but instead, it</span><span class="comment">'</span><span class="comment">s for strings rather than digits. You can replace &quot;dinosaurs&quot; with any word you like!
</span>
	<span class="keyword">r</span><span class="keyword">eturn</span>(0);
}

<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">** TEST 2: Test time! Write a program which prints out the following: There are many numbers in life, some arer big (like 297563476) and others are small (such as 3). Use the correct placeholder for the numbers.
</span>
</pre>
#+END_EXPORT

* E#001 (2022-08-28) - 01_intro (C)
:PROPERTIES:
:CUSTOM_ID: org190da13
:END:

#+BEGIN_EXPORT html
<pre><span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">TITLE: 01_intro.c
</span>
<span class="comment-delimiter">/</span><span class="comment-delimiter">*</span><span class="comment">
The following is what we call a dummy program. It literally does nothing:
~main () {}~

Let</span><span class="comment">'</span><span class="comment">s print the good old &quot;Hello, World!&quot;

~include~ is a called a pre-processor directive. This tells the compiler &quot;What</span><span class="comment">'</span><span class="comment">s up old friend, next time you compile this text file, mind including the contents of the stdio.h (aka standard input/output) file? Okay, cool. Bye!&quot;

The ~stdio.h~ is called a header file. It includes stuff (aka definitions) that we can use in our program. One of these definitions is... you guessed it, ~puts~.

In fact, I realised that you can view the content of this ~stdio.h~ file.

On Linux, it is located at ~/usr/include/stdio.h~.
</span><span class="comment-delimiter">*/</span>

<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="string">&lt;</span><span class="string">stdio.h</span><span class="string">&gt;</span>

<span class="type">i</span><span class="type">n</span><span class="type">t</span> <span class="function-name">main</span>() <span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">This is called the entry point to the C program.
</span>{
	puts(<span class="string">&quot;Hello, World!&quot;</span>);
	<span class="keyword">return</span>(0);
}

<span class="comment-delimiter">/</span><span class="comment-delimiter">/ </span><span class="comment">** TEST 1: Test time! Write a program (from memory!) That prints out the following text: &quot;This is my first ever mini C program. It</span><span class="comment">'</span><span class="comment">s not much, but it</span><span class="comment">'</span><span class="comment">s honest work...&quot;
</span>
</pre>
#+END_EXPORT
